HALCOMP_SUBMAKEFILE= hal/components/Submakefile
# for debugging this file - to prevent recompilation of
# everything under the sun with every small change
#HALCOMP_SUBMAKEFILE=

COMPS := $(sort $(wildcard hal/components/*.comp))

USER_COMP_COMPS := $(sort $(wildcard hal/user_comps/*.comp))

COMP_DOCPAGES := $(patsubst hal/components/%.comp, ../man/man9/%.asciidoc, \
	$(COMPS))

USER_COMP_DOCPAGES := $(patsubst hal/user_comps/%.comp, ../man/man9/%.asciidoc, \
	$(USER_COMP_COMPS))

MSG_COMPS := $(wildcard machinetalk/msgcomponents/*.comp)

MSG_COMP_DOCPAGES := $(patsubst machinetalk/msgcomponents/%.comp, \
	../man/man9/%.asciidoc, $(MSG_COMPS))

DRIVER_COMPS := $(patsubst %,hal/drivers/%, \
	mesa_7i65.comp \
	mesa_uart.comp \
        $(if $(TARGET_PLATFORM_PC), \
	    pcl720.comp \
		) \
		$(ifeq $(HAS_SYS_IO),yes \
	    serport.comp \
            ) \
	)

DRIVER_COMP_DOCPAGES := $(patsubst hal/drivers/%.comp, ../man/man9/%.asciidoc, \
	$(COMP_DRIVERS))

docpages: $(COMP_DOCPAGES) $(DRIVER_COMP_DOCPAGES) $(MSG_COMP_DOCPAGES) $(USER_COMP_DOCPAGES)

ifeq ($(BUILD_DOCS),yes)
    TARGETS += docpages
    .PHONY: docpages
endif

obj-m += $(patsubst hal/drivers/%.comp, %.o, \
	$(patsubst hal/components/%.comp, %.o, \
	$(patsubst machinetalk/msgcomponents/%.comp, %.o, \
	$(COMPS) $(DRIVER_COMPS) $(MSG_COMPS))))

$(COMP_DOCPAGES): ../man/man9/%.asciidoc: hal/components/%.comp  ../bin/comp
	$(ECHO) Making comp docpage $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)../bin/comp --document \
	--frontmatter="edit-repo: $(EDIT_REPO)" 	\
	--frontmatter="edit-branch: $(EDIT_BRANCH)" 	\
	-o $@ $<

$(USER_COMP_DOCPAGES): ../man/man9/%.asciidoc: hal/user_comps/%.comp  ../bin/comp
	$(ECHO) Making comp docpage $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)../bin/comp --document \
	--frontmatter="edit-repo: $(EDIT_REPO)" 	\
	--frontmatter="edit-branch: $(EDIT_BRANCH)" 	\
	-o $@ $<

$(DRIVER_COMP_DOCPAGES): ../man/man9/%.asciidoc: hal/drivers/%.comp ../bin/comp
	$(ECHO) Making driver comp docpage $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)../bin/comp --document  \
	--frontmatter="edit-repo: $(EDIT_REPO)" 	\
	--frontmatter="edit-branch: $(EDIT_BRANCH)" 	\
	-o $@ $<

$(MSG_COMP_DOCPAGES): ../man/man9/%.asciidoc: \
		machinetalk/msgcomponents/%.comp ../bin/comp
	$(ECHO) Making message comp docpage $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)../bin/comp --document  \
	--frontmatter="edit-repo: $(EDIT_REPO)" 	\
	--frontmatter="edit-branch: $(EDIT_BRANCH)" 	\
	-o $@ $<

# Build .c sources
objects/%.c: %.comp ../bin/comp
	$(ECHO) "Preprocessing $(notdir $<)"
	@mkdir -p $(dir $@)
	$(Q)../bin/comp --require-license -o $@ $<

# Generate rules for building component.so files from component.comp files
#
# example:  $$(call comp_build_rules,hal/components,hal/components/logic.comp)
# produces rules:
# logic-objs := objects/hal/components/logic.o
# ../rtlib/modules/remote.so: \
#     objects/modules/objects/machinetalk/msgcomponents/remote.o
#
define comp_build_rules
$$(patsubst $$(dir $(1))%.comp,%-objs,$(1)) := \
    $$(patsubst %.comp,objects/%.o,$(1))
$$(patsubst $(dir $(1))%.comp,$(RTLIBDIR)/%.so,$(1)): \
    $(OBJDIR)/objects/$$(patsubst %.comp,%.o,$(1))

endef
#
# For hal/components/*.comp:
$(eval $(foreach comp,$(COMPS),$(call comp_build_rules,$(comp))))
#
# For hal/drivers/*.comp:
$(eval $(foreach comp,$(DRIVER_COMPS),$(call comp_build_rules,$(comp))))
#
# For machinetalk/msgcomponents/*.comp:
$(eval $(foreach comp,$(MSG_COMPS),$(call comp_build_rules,$(comp))))


#$$(info $(call comp_build_rules,machinetalk/msgcomponents/remote.comp))
#$$(info $(patsubst $(dir machinetalk/msgcomponents/remote.comp)%.comp,%-objs,machinetalk/msgcomponents/remote.comp) := $(patsubst %.comp,objects/%.o,machinetalk/msgcomponents/remote.comp))
#$$(info $(patsubst machinetalk/msgcomponents/%.comp,../rtlib/modules/%.so,machinetalk/msgcomponents/remote.comp): objects/modules/objects/$(patsubst %.comp,%.o,machinetalk/msgcomponents/remote.comp))

HALSTREAMERSRCS := hal/components/streamer_usr.c
USERSRCS += $(HALSTREAMERSRCS)

../bin/halstreamer: \
		$(call TOOBJS, $(HALSTREAMERSRCS)) \
		../lib/liblinuxcnchal.so.0 \
		../lib/liblinuxcnculapi.so.0
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC) $(LDFLAGS) -o $@ $^
TARGETS += ../bin/halstreamer

HALSAMPLERSRCS := hal/components/sampler_usr.c
USERSRCS += $(HALSAMPLERSRCS)

../bin/halsampler: \
		$(call TOOBJS, $(HALSAMPLERSRCS)) \
		../lib/liblinuxcnchal.so.0 \
		../lib/liblinuxcnculapi.so.0
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CC) $(LDFLAGS) -o $@ $^
TARGETS += ../bin/halsampler

# C-language components

#$$(eval $(call c_comp_build_rules,hal/components/boss_plc.o))
$(eval $(call c_comp_build_rules,hal/components/encoder.o))
$(eval $(call c_comp_build_rules,hal/components/encoderv2.o))
$(eval $(call c_comp_build_rules,hal/components/counter.o))
$(eval $(call c_comp_build_rules,hal/components/encoder_ratio.o))
$(eval $(call c_comp_build_rules,hal/components/encoder_ratiov2.o))
$(eval $(call c_comp_build_rules,hal/components/stepgen.o))
$(eval $(call c_comp_build_rules,hal/components/stepgenv2.o))
$(eval $(call c_comp_build_rules,hal/components/lcd.o))
$(eval $(call c_comp_build_rules,hal/components/matrix_kb.o))
$(eval $(call c_comp_build_rules,hal/components/mux_generic.o))
$(eval $(call c_comp_build_rules,hal/components/pwmgen.o))
$(eval $(call c_comp_build_rules,hal/components/pwmgenv2.o))
$(eval $(call c_comp_build_rules,hal/components/siggen.o))
$(eval $(call c_comp_build_rules,hal/components/threads.o))
#$$(eval $(call c_comp_build_rules,hal/components/supply.o))
$(eval $(call c_comp_build_rules,hal/components/sim_encoder.o))
#$$(eval $(call c_comp_build_rules,hal/components/watchdog.o))
#$$(eval $(call c_comp_build_rules,hal/components/modmath.o))
$(eval $(call c_comp_build_rules,hal/components/streamer.o))
$(eval $(call c_comp_build_rules,hal/components/sampler.o))
$(eval $(call c_comp_build_rules,hal/components/delayline.o))
